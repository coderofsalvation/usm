#!/bin/bash
export DIALOG=dialog
[[ -n $DISPLAY ]] && which xdialog && export DIALOG=xdialog
export TMPFILE=/tmp/.$(whoami).reply
export REPLY=$TMPFILE.usm
export MATCHES=$TMPFILE.matches
export OPTIONS=$TMPFILE.options
export SELECTEDFILE=$TMPFILE.selectedfile
export CURRENTINDEX=$TMPFILE.currentindex
export players=()
export query="kick.*\.wav$"
export limit=25
export workdir="$(pwd)"
export resultdir="/tmp/usm"
touch $REPLY
which $DIALOG || { echo "[!] $DIALOG not installed..aborting"; exit 0; }
#export DIALOG="$DIALOG --ascii-lines"

helptxt='
    UNIX SAMPLE MANAGER (USM)

    Search TERABYTES of samples across different (network) disks in few seconds (+offline)

    ## THE PROBLEM/SOLUTION

    How to quickly search thru terabytes of samples across different harddrives/clouddrives? And what if they are offline?
    This is a problem scientists, audiodesigners and videoartists sometimes face.
    solution: the good old locate unix tool. 

    ## USAGE

    lets index some huge folders

    $ sudo apt-get install mlocate dialog
    $ mkdir ~/.mlocate
    $ updatedb --output ~/.mlocate/samples    --root /home/myusername/samples
    $ updatedb --output ~/.mlocate/myusbdiskB --root /mnt/myusbdiskB/projects
    $ updatedb --output ~/.mlocate/dropbox    --root /mnt/Dropbox/audio
    $ updatedb --output ~/.mlocate/gdrive     --root /mnt/Gdrive/myrockband

    # depending on your mlocate version, use one of these:

    $ echo "export LOCATE_PATH=/var/lib/mlocate/mlocate.db:$(find ~/.mlocate/* | sed 'N;s|\n|:|g')" >> ~/.bashrc
    $ echo "export LOCATE_PATH=~/.mlocate" >> ~/.bashrc
    
    now launching ./usm will use locate (which searches thru ~/.mlocate) and automatically 
    symlink/copy results to a searchresults/work-folder.

    TIP: use rclone to mount clouddrives as networkdrives

'

kill_audio(){  
  echo "stopping audio"
  # not needed because audioplayers play in foreground
  #for p in ${players[@]}; do killall -s SIGINT $(basename $p) &>/dev/null; done 
}

is_audio(){
  [[ "$1" =~ \.mp3$|\.wav$|\.aiff$|\.iff$|\.ogg$|\.flac$ ]] && return 0 || return 1
}

play_audio(){
  file="$1"
  ! is_audio "$file" && return 1
  players=()
  [[ "$file" =~ \.ogg$ ]] && players+=("$(which ogg123)")
  [[ "$file" =~ \.mp3$ ]] && {
    which mplayer  &>/dev/null && players+=("$(which mplayer) -novideo")
    which mpg123 &>/dev/null && players+=("$(which mpg123)")
  }
  [[ "$file" =~ \.flac$|\.wav$|\.aiff$|\.iff$ ]] && {
    which play   &>/dev/null && players+=("$(which play)")
    which mplayer   &>/dev/null && players+=("$(which mplayer) -novideo")
    which paplay &>/dev/null && players+=("$(which paplay)")
    which aplay  &>/dev/null && players+=("$(which aplay)");
  }
  kill_audio
  player="${players[0]}"
  ${player} "$file"
  return 0
}

prefs(){
    TERM=vt220 ${DIALOG} --title " " --clear \
              --no-tags --checklist "Search options " 20 61 5 \
              "Regex support" off \
              "Foo bar" ON 2> $OPTIONS
    searchdialog
}

helptext(){
   TERM=vt220 ${DIALOG} --msgbox "$helptxt" 50 130
   searchdialog
}

searchdialog(){
    sleep 0.3s
    TERM=vt220 ${DIALOG} --help-button --no-cancel --ok-label "Search!" --title "Unix Sample Manager" --extra-button --extra-label "Options" --clear \
            --form "CTRL-C to quit" 15 50 0 \
            "Searchterm:" 1 1 "$query"  1 20 25 0 \
            "Result limit:" 2 1 "$limit" 2 20 5 0 \
            "Searchresults folder:" 3 1 "$workdir" 3 20 85 0 2>$REPLY \
            "Work folder:" 4 1 "$resultdir" 4 20 105 0 2>$REPLY
    local ret=$?
    if [[ $ret == '2' ]]; then helptext; return 0; fi 
    if [[ $ret == '3' ]]; then prefs; return 0; fi 
    [[ ! -s $REPLY ]] && return 1
    query=$(cat $REPLY | sed -n '1p' )
    limit=$(cat $REPLY | sed -n '2p' )
    workdir="$(cat $REPLY | sed -n '3p' )"
    resultdir="$(cat $REPLY | sed -n '4p' )"
    return $ret
}

preview(){
    local menuitems=()
    local selected=()
    local index="$(<$CURRENTINDEX)"
    local i=1
    while read line; do menuitems+=("$i" "$line"); i=$((i+1)); done < $MATCHES
    [[ ${#index} > 0 ]] && selected+=("--default-item" "$index")
    ${DIALOG} --title "Matches" --extra-button --extra-label "Save" --cancel-label "Back" --ok-label "Preview" --no-tags ${selected[@]} --menu " " 50 130 50 "${menuitems[@]}" 2> $CURRENTINDEX
    ret=$?
    index=$(<$CURRENTINDEX)
    if [[ ! -z $index ]]; then
        SELECTEDFILE="$( cat $MATCHES | sed -n "$index"p )"
        echo "loading $SELECTEDFILE"
        [[ -z "$SELECTEDFILE" ]] && return 0
        [[ ! -z "$SELECTEDFILE" ]] && [[ $ret == '0' ]] && [[ ! -n $ACTION ]] && play_audio "$SELECTEDFILE"
        [[ ! -z "$SELECTEDFILE" ]] && [[ $ret == '0' ]] && [[ -n $ACTION   ]] && ${ACTION} "$SELECTEDFILE"
        [[ ! -z "$SELECTEDFILE" ]] && [[ $ret == '3' ]] && { cp "$SELECTEDFILE" "$workdir"/.  || read -p 'press a key to continue'; }
        kill_audio
        sleep 0.1s
        preview
    fi
}

main(){
    searchdialog 
    if [[ $? == 0 ]]; then 
        if (( $limit > 20 )); then  
            locate -i -r "$query" -l$limit | tee $MATCHES | TERM=vt220 ${DIALOG} --title "Searching" "$@" --programbox 50 130
        else
            echo "searching.."
            locate -i -r "$query" -l$limit > $MATCHES 
        fi
        test -d $resultdir || mkdir -p $resultdir
        test -d $resultdir && { set +e; rm $resultdir/*; set -e; }
        cat $MATCHES | while read f; do ln -s "$f" $resultdir/.; done
        ls -la $resultdir
        read -p presskey foo
        preview
    fi
    main
}
main

#trap '[[ ! -z $TMPFILE ]] && rm $TMPFILE.*' 0 1 2 3 4 5 255
